{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
		"appServicePlanSKU": { 
			"type": "string", 
			"defaultValue": "F1",
            "allowedValues": ["F1", "B1", "D1", "S1"],
            "metadata": {
                "description": "SKU for App Service Plan"
            }
		},
		"storageSKU": { 
			"type": "string", 
			"defaultValue": "Standard_LRS",
            "allowedValues": ["Standard_LRS", "Standard_ZRS", "Standard_GRS"],
            "metadata": {
                "description": "SKU for storage account"
            }
		},
		"location": { 
			"type": "string", 
			"defaultValue": "[resourceGroup().location]",
            "metadata": {
                "description": "Location of storage account"
            }
		},
		"environment": { 
			"type": "string",
            "minLength": 3,
            "maxLength": 5,
            "metadata": {
                "description": "Name of environment"
            }
		}
	},
    "variables": {
		"resourceName": "[concat('techlab',parameters('environment'))]",
        "serverFarmResourceId": "[resourceId('Microsoft.Web/serverfarms', variables('resourceName'))]",/* <NewStuff> */
        "roleAssignmentId": "[guid(uniqueString(resourceGroup().name, variables('resourceName')))]",
        "contributorRoleId": "b24988ac-6180-42a0-ab88-20f7382dd24c",
        "tableName": "Users"/* </NewStuff> */
	},
    "resources": [
        {
            /* Storage account */
            "type":"Microsoft.Storage/storageAccounts",
            "apiVersion":"2019-04-01",
            "name":"[variables('resourceName')]",
            "location":"[parameters('location')]",
            "kind":"StorageV2",
            "sku":{
                "name":"[parameters('storageSKU')]"
            }
        },
        {
            /* App service plan (Windows) */
            "name": "[variables('resourceName')]",
            "apiVersion": "2018-02-01",
            "type": "Microsoft.Web/serverfarms",
            "location": "[parameters('location')]",
            "sku": {
                "name": "[parameters('appServicePlanSKU')]"
            },
            "properties": {
            }
        },
        {
            /* App service */
            "name": "[variables('resourceName')]",
            "type": "Microsoft.Web/sites",
            "apiVersion": "2016-08-01",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[variables('serverFarmResourceId')]"
            ],
            "properties": {
                "serverFarmId": "[variables('serverFarmResourceId')]"
            },
            "resources": [
                {
                    "type": "config",
                    "name": "appsettings",
                    "apiVersion":"2016-08-01",
                    "properties": {
                        "TableUri": "[reference(concat('Microsoft.Storage/storageAccounts/', 
                            variables('resourceName'))).primaryEndpoints.table]"
                    },
                    "dependsOn": [
                            "[resourceId('Microsoft.Web/sites', variables('resourceName'))]"
                    ]
                }
            ]
        },/* <NewStuff> */
        {
            "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
            "name": "[variables('resourceName')]",
            "apiVersion": "2018-11-30",
            "location": "[resourceGroup().location]"
        },
        {
            "type": "Microsoft.Authorization/roleAssignments",
            "apiVersion": "2017-09-01",
            "name": "[variables('roleAssignmentId')]",
            "dependsOn": [
                "[variables('resourceName')]"
                ],
                "properties": {
                    "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions/', 
                        variables('contributorRoleId'))]",
                    "principalId": "[reference(concat('Microsoft.ManagedIdentity/userAssignedIdentities/', 
                        variables('resourceName')), '2018-11-30').principalId]"
                }
        },
        {
            "type": "Microsoft.Resources/deploymentScripts",
            "apiVersion": "2019-10-01-preview",
            "name": "createTableScript",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[variables('roleAssignmentId')]"
            ],
            "identity": {
                "type": "userAssigned",
                "userAssignedIdentities": {
                    "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', 
                    variables('resourceName'))]": {
                    }
                }
            },
            "kind": "AzurePowerShell",
            "properties": {
                "azPowerShellVersion": "2.8",
                "arguments": "[concat('-resourceGroup ', resourceGroup().name, 
                    ' -storageAccountName ', variables('resourceName'), 
                    ' -tableName ', variables('tableName'))]",
                "scriptContent": "
                    param([string] $resourceGroup,
                        [string] $storageAccountName,
                        [string] $tableName)
                    $storageAccount = Get-AzStorageAccount -ResourceGroupName $resourceGroup -Name $storageAccountName 
                    $ctx = $storageAccount.Context
                    $existing = Get-AzStorageTable -Context $ctx | Where-Object Name -eq $tableName
                    if ($existing.Length -eq 1) {
                        $table = $existing
                        $output = 'Table {0} already existed' -f $tableName
                    } else {
                        $table = New-AzStorageTable -Name $tableName -Context $ctx
                        $output = 'Created table {0}' -f $tableName
                    }
                    Write-Output $output
                    $DeploymentScriptOutputs = @{ }
                    $DeploymentScriptOutputs['uri'] = $table.Uri.AbsoluteUri
                ",
                "supportingScriptUris": [
                ],
                "timeout": "PT30M",
                "cleanupPreference": "OnSuccess",
                "retentionInterval": "P1D"
            }/* </NewStuff> */
        }
    ],
    "outputs": {/* <NewStuff> */
        "result": {
            "value": "[reference('createTableScript').outputs.uri]",
            "type": "string"
        }/* </NewStuff> */
    },
    "functions": []
}